"""
Email manager for the GDS Contact Management System.
"""
from typing import List, Dict, Any
from sqlalchemy.orm import Session
from app.database import crud
from app.database.models import Organization, Contact, EmailEngagement
from app.email.generator import EmailGenerator
from app.email.microsoft365 import Microsoft365Client
from app.config import EMAIL_DAILY_LIMIT_PER_USER, EMAIL_USERS
from app.utils.logger import get_logger
import datetime
from sqlalchemy.orm import joinedload

# Import validator
from app.validation.advanced_email_validator import AdvancedEmailValidator

logger = get_logger(__name__)


class EmailManager:
    """
    Manages email generation and sending using templates and the Microsoft 365 API.
    """
    
    def __init__(self, db_session, auto_send=False, sandbox_mode=True, use_individual_thresholds=True):
        """
        Initialize the email manager.
        
        Args:
            db_session: SQLAlchemy database session
            auto_send: Whether to auto-send emails that pass validation
            sandbox_mode: Whether to operate in sandbox mode (redirect emails)
            use_individual_thresholds: Whether to use individual thresholds for contact/org validation
        """
        self.db_session = db_session
        self.email_generator = None
        self.ms365_client = None
        
        # Configuration for manager behavior
        self.auto_send = auto_send
        self.sandbox_mode = sandbox_mode
        self.use_individual_thresholds = use_individual_thresholds
        
        # --- Initialize Validator --- 
        # Hurdles are now loaded within the validator itself
        try:
            self.validator = AdvancedEmailValidator(self.db_session)
            logger.info(f"AdvancedEmailValidator initialized successfully within EmailManager (use_individual_thresholds={use_individual_thresholds}).")
        except Exception as e:
             logger.error(f"Failed to initialize AdvancedEmailValidator in EmailManager: {e}")
             self.validator = None # Set to None if init fails
        # --- End Initialize Validator --- 
        
        logger.info(f"EmailManager initialized (API clients not yet set up)")
        
    def setup(self):
        """Set up the API clients.
        
        Returns:
            bool: True if setup was successful, False otherwise
        """
        try:
        # Set up the email generator
        from app.email.generator import EmailGenerator
        self.email_generator = EmailGenerator()
        
        # Set up the Microsoft 365 client
        from app.email.microsoft365 import Microsoft365Client
        self.ms365_client = Microsoft365Client()
        
        logger.info(f"EmailManager set up successfully")
            return True
        except Exception as e:
            logger.error(f"Error setting up EmailManager: {e}")
            return False
        
    def create_draft_emails(self, max_per_salesperson=None, min_confidence=0.5, target_org_types=None, target_states=None, auto_send_enabled=None, sandbox_mode=True) -> Dict[str, int]:
        """
        Create draft emails for contacts that haven't been emailed yet.
        Applies Gemini validation and configured hurdles.
        
        Args:
            max_per_salesperson: Max emails per salesperson (defaults to config).
            min_confidence: Minimum *original* confidence score (from discovery) to consider contact.
            target_org_types: Specific organization types to target.
            target_states: Specific states to target.
            auto_send_enabled: Override for manager's auto_send setting.
            sandbox_mode: Override for manager's sandbox_mode setting.
        
        Returns:
            Dictionary with email addresses and counts of sent/drafted emails.
        """
        # Use instance setting if override not provided
        if auto_send_enabled is None:
            auto_send_enabled = self.auto_send 
        if sandbox_mode is None:
            sandbox_mode = self.sandbox_mode

        logger.info(f"Running create_draft_emails: auto_send={auto_send_enabled}, sandbox={sandbox_mode}")

        # Check if validator initialized
        if not self.validator:
             logger.error("AdvancedEmailValidator failed to initialize. Cannot proceed with email creation.")
             return {}

        # Use config value if not specified
        if max_per_salesperson is None:
            max_per_salesperson = EMAIL_DAILY_LIMIT_PER_USER
        
        # Set up API clients if needed
        if not self.email_generator or not self.ms365_client:
            setup_success = self.setup()
            if not setup_success:
            logger.error("Failed to set up API clients. Cannot create drafts.")
            return {}
            
        # Authenticate with Microsoft 365
        if not self.ms365_client or not self.ms365_client.authenticate():
            logger.error("Failed to authenticate with Microsoft 365. Cannot create drafts.")
            return {}
            
        # Track counts
        drafts_created = {email: 0 for email in EMAIL_USERS.keys()}
        for email in EMAIL_USERS.keys():
            drafts_created[f"{email}_sent"] = 0
            drafts_created[f"{email}_draft"] = 0
        
        # Process target_org_types if provided
        filtered_org_types = None
        if target_org_types:
            if isinstance(target_org_types, str): filtered_org_types = [org_type.strip() for org_type in target_org_types.split(',')]
            else: filtered_org_types = target_org_types
            logger.info(f"Filtering emails for organization types: {filtered_org_types}")
        
        filtered_states = None
        if target_states:
            if isinstance(target_states, str): filtered_states = [state.strip() for state in target_states.split(',')]
            else: filtered_states = target_states
            logger.info(f"Filtering emails for states: {filtered_states}")
        
        # Process each sales person
        for user_email, assigned_org_types_config in EMAIL_USERS.items():
            assigned_org_types = assigned_org_types_config
            if filtered_org_types and filtered_org_types != ["all"]:
                assigned_org_types = [org_type for org_type in assigned_org_types_config if org_type in filtered_org_types]
                if not assigned_org_types:
                    logger.info(f"No matching organization types for {user_email}, skipping")
                    continue
            
            logger.info(f"Processing for user: {user_email}, Types: {assigned_org_types}")
            
            # Get contacts matching initial criteria
            contacts_to_process = crud.get_contacts_for_email_draft(
                self.db_session, user_email, max_per_salesperson * 2, # Fetch more initially, filter after validation
                min_confidence=min_confidence,
                org_types=assigned_org_types, 
                states=filtered_states
            )
            
            logger.info(f"Found {len(contacts_to_process)} potential contacts for {user_email} before validation.")
            
            if not contacts_to_process:
                continue

            # --- Perform Validation --- 
            try:
                # Use the initialized validator
                # validate_contacts_for_sending now handles hurdles internally
                validation_results = self.validator.validate_contacts_for_sending(contacts_to_process)
            
            except Exception as e:
                # Handle critical errors during the entire validation batch
                logger.error(f"CRITICAL ERROR during batch validation for user {user_email}: {e}. Aborting for this user.")
                # Stop processing for this user if validation fails catastrophically
                continue # Move to the next salesperson
            # --- End Validation --- 
            
            total_for_user = 0
            sent_for_user = 0
            drafted_for_user = 0

            # --- Process Validated Contacts --- 
            for contact_id, validation_data in validation_results.items():
                # Stop if user limit reached
                    if total_for_user >= max_per_salesperson:
                    logger.info(f"Reached max emails ({max_per_salesperson}) for user {user_email}.")
                        break
                        
                contact = validation_data["contact"]
                organization = validation_data["organization"]
                should_auto_send = validation_data.get("auto_send", False)
                should_trigger_no_name = validation_data.get("trigger_no_name_email", False)
                validation_error = validation_data.get("error")

                if validation_error:
                     logger.warning(f"Skipping contact {contact_id} due to validation error: {validation_error}")
                     continue # Skip contacts that had a validation error
                    
                    if not organization:
                    logger.warning(f"Skipping contact {contact_id} because organization data is missing in validation result.")
                        continue
                        
                try:
                    # --- Handle No-Name Email Trigger --- 
                    if should_trigger_no_name:
                         logger.info(f"Processing no-name email for {contact.email} (Contact ID: {contact_id})")
                         # Generate specific no-name email content
                         # Assuming email_generator can handle contact object without name fields
                         email_body = self.email_generator.generate_email(contact, organization, template_type='no_name')
                         subject = f"Intro to GDS (Organization: {organization.name})" # Example subject

                         recipient_email = contact.email
                         # Apply sandbox redirection if needed
                        if sandbox_mode:
                        logger.info(f"Sandbox mode: Redirecting no-name email for {contact.email} to jared@gbl-data.com")
                        subject = f"[TEST - NoName - to: {contact.email}] {subject}"
                        recipient_email = "jared@gbl-data.com"
                         
                         # Create draft for the no-name email
                         # Using the assigned user for the contact as the sender
                         sender_email = contact.assigned_to or user_email # Fallback to loop user
                         email_id = self.ms365_client.create_draft_email(
                             sender_email, recipient_email, subject, email_body
                         )
                         
                         if email_id:
                              drafted_for_user += 1
                              total_for_user += 1
                              # Update DB status for draft creation
                              crud.update_contact_draft_status(self.db_session, contact.id, email_id)
                              logger.info(f"Successfully created draft for no-name email to {contact.email}")
                            else:
                              logger.error(f"Failed to create no-name draft for {contact.email}")
                         
                         continue # Skip normal processing for this contact
                    # --- End No-Name Email Trigger --- 

                    # --- Normal Email Processing (Send or Draft) --- 
                    email_body = self.email_generator.generate_email(contact, organization) # Use default template
                    subject = f"Intro to GDS"
                    
                    # Decide Action: Send or Draft?
                    action = "draft" 
                    if should_auto_send and auto_send_enabled:
                        action = "send"
                        recipient_email = contact.email
                        if sandbox_mode:
                        logger.info(f"Sandbox mode: Redirecting email for {contact.email} to jared@gbl-data.com")
                        subject = f"[TEST - to: {contact.email}] {subject}"
                        recipient_email = "jared@gbl-data.com"
                    else:
                        recipient_email = contact.email
                        reason = "Below confidence hurdle" if not should_auto_send else "Auto-send disabled"
                        logger.info(f"Marking email for {recipient_email} as DRAFT ({reason})")

                    # Execute Action
                    email_id = None
                    sender_email = contact.assigned_to or user_email # Ensure sender is defined
                    if action == "send" and not sandbox_mode: 
                        logger.info(f"Auto-sending email to {recipient_email}")
                        email_id = self.ms365_client.send_email(sender_email, recipient_email, subject, email_body)
                        if email_id: sent_for_user += 1
                    else: 
                        logger.info(f"Creating draft for {recipient_email} (Action: {action}, Sandbox: {sandbox_mode})")
                        email_id = self.ms365_client.create_draft_email(sender_email, recipient_email, subject, email_body)
                        if email_id: drafted_for_user += 1
                            
                    # Update DB and counts if successful
                            if email_id:
                                total_for_user += 1
                        if action == "send" and not sandbox_mode:
                             crud.update_contact_sent_status(self.db_session, contact.id, email_id)
                        else:
                             crud.update_contact_draft_status(self.db_session, contact.id, email_id)
                    else:
                         logger.error(f"Failed to {action} email for {recipient_email}")

                except Exception as process_err:
                     logger.error(f"Error processing contact {contact_id} after validation: {process_err}", exc_info=True)
                     # Don't let one contact error stop the batch for the user
                                continue
            # --- End Process Validated Contacts --- 

            # Update overall counts for the user
            drafts_created[user_email] = total_for_user
            drafts_created[f"{user_email}_sent"] = sent_for_user
            drafts_created[f"{user_email}_draft"] = drafted_for_user
            logger.info(f"Finished processing for user {user_email}. Total: {total_for_user}, Sent: {sent_for_user}, Drafted: {drafted_for_user}")
        
        # Calculate final totals
        drafts_created['total'] = sum(drafts_created[email] for email in EMAIL_USERS.keys())
        drafts_created['total_sent'] = sum(drafts_created[f"{email}_sent"] for email in EMAIL_USERS.keys())
        drafts_created['total_draft'] = sum(drafts_created[f"{email}_draft"] for email in EMAIL_USERS.keys())
        
        logger.info(f"Finished create_draft_emails run. Total Processed: {drafts_created['total']}, Total Sent: {drafts_created['total_sent']}, Total Drafted: {drafts_created['total_draft']}")
        return drafts_created
    
    def get_daily_report(self) -> Dict[str, Any]:
        """
        Get a report of new contacts and emails created today.
        
        Returns:
            Dictionary with report data
        """
        new_contacts = crud.get_new_contacts_today(self.db_session)
        new_drafts = crud.get_drafts_created_today(self.db_session)
        
        # Group contacts by organization type
        contacts_by_type = {}
        for contact in new_contacts:
            organization = self.db_session.query(Organization).filter(
                Organization.id == contact.organization_id
            ).first()
            
            if organization:
                org_type = organization.org_type
                if org_type not in contacts_by_type:
                    contacts_by_type[org_type] = []
                contacts_by_type[org_type].append({
                    "name": f"{contact.first_name} {contact.last_name}",
                    "title": contact.job_title,
                    "organization": organization.name
                })
        
        # Group drafts by assigned sales person
        drafts_by_user = {}
        for contact in new_drafts:
            user = contact.assigned_to
            if user not in drafts_by_user:
                drafts_by_user[user] = []
            
            organization = self.db_session.query(Organization).filter(
                Organization.id == contact.organization_id
            ).first()
            
            if organization:
                drafts_by_user[user].append({
                    "name": f"{contact.first_name} {contact.last_name}",
                    "title": contact.job_title,
                    "organization": organization.name,
                    "draft_id": contact.email_draft_id
                })
        
        # Create report
        report = {
            "new_contacts": {
                "total": len(new_contacts),
                "by_type": contacts_by_type
            },
            "new_drafts": {
                "total": len(new_drafts),
                "by_user": drafts_by_user
            }
        }
        
        return report

    # --- Deprecated/Removed Methods ---

    # def _validate_contacts_for_sending(self, contacts):
    #     # ... (Removed - logic moved to AdvancedEmailValidator and called from create_draft_emails) ...
    #     pass

    # def process_contacts_for_user(self, user_email, org_types=None, states=None, limit=20, min_confidence=0.5):
    #     logger.warning("DEPRECATED: process_contacts_for_user is deprecated. Use create_draft_emails.")
    #     # ... (Removed - logic superseded by create_draft_emails) ...
    #     return 0

    # def _create_email_draft(self, contact, validation_result=None):
    #     logger.warning("DEPRECATED: _create_email_draft is deprecated. Logic handled within create_draft_emails.")
    #     # ... (Removed - logic handled within create_draft_emails) ...
    #     return False

    # --- End of EmailManager class ---